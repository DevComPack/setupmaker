package com.dcp.sm.config.io.xml;

import java.io.File;

import javax.xml.stream.XMLStreamException;


import org.codehaus.staxmate.SMOutputFactory;
import org.codehaus.staxmate.out.SMOutputDocument;
import org.codehaus.staxmate.out.SMOutputElement;

import com.ctc.wstx.stax.WstxOutputFactory;

import com.dcp.sm.gui.pivot.Master;


public class StaxMateFactory
{
    private SMOutputDocument doc;//Xml File
    private SMOutputElement root = null;//Root element
    
    /**
     * Constructor
     * @param xml_file
     */
    public StaxMateFactory(String xml_file) {
        if (xml_file != null) {
            WstxOutputFactory factory = new WstxOutputFactory();
            factory.setProperty(WstxOutputFactory.P_AUTOMATIC_EMPTY_ELEMENTS, true);
            // 1: need output factory
            SMOutputFactory outf = new SMOutputFactory(factory);
            try {
                doc = outf.createOutputDocument(new File(xml_file));
                // (optional) 3: enable indentation (note spaces after backslash!)
                doc.setIndentation("\n\t\t\t\t\t", 1, 1);
                // 4. comment regarding generation time
                doc.addComment(" generated by "+Master.AppName+" "+Master.AppVersion+" on " + new java.util.Date().toString());
            } catch (XMLStreamException e) {
                e.printStackTrace();
            }
        }
    }
    
    public void close() {//Close
        try {
            assert doc != null;
            doc.closeRoot();
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Sets/Gets the root element
     * @return SMOutputElement
     * @param ELEMENT
     */
    public SMOutputElement setRoot(String ELEMENT) {
        try {
            root = doc.addElement(ELEMENT);
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
        return root;
    }
    
    /*
     * <xi:include href="res/xml/PacksPanelSpec.xml">
            <xi:fallback>
                --Returning element
            </xi:fallback>
     *  </xi:include>
     */
    public SMOutputElement includeFile(SMOutputElement element, String file_to_include) throws XMLStreamException {
        SMOutputElement include = element.addElement("xi:include") ;//<xi:include
        include.addAttribute("href", file_to_include);//href="..">
        SMOutputElement fallback = include.addElement("xi:fallback");//<xi:fallback>
        return fallback;
    }
    
    
}
